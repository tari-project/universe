---
name: Release

on:
  push:
    paths-ignore:
      - '**/*.md'
    branches:
      - 'release'
      - 'beta'
      - 'build-*'
  schedule:
    - cron: '05 00 * * *'
  workflow_dispatch:

concurrency:
  # https://docs.github.com/en/actions/examples/using-concurrency-expressions-and-a-test-matrix
  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
  cancel-in-progress: ${{ !startsWith(github.ref, 'refs/tags/v') || github.ref != 'refs/heads/main' || github.ref != 'refs/heads/release' }}
permissions: {}

env:
  TS_FEATURES: release-ci

jobs:
  builds:
    name: Building ${{ matrix.platform }}${{ matrix.extra }}
    # best effort disabled by default
    continue-on-error: ${{ matrix.best_effort || false }}
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'ubuntu-22.04'
            args: '--bundles deb,appimage,updater'
            extra: '-x64'
          - platform: 'ubuntu-24.04-arm'
            args: '--bundles deb,appimage,updater'
            best_effort: true
          - platform: 'ubuntu-22.04'
            args: '--bundles rpm'
            extra: '-x64-rpm'
            best_effort: true
          - platform: 'ubuntu-24.04-arm'
            args: '--bundles rpm'
            extra: '-rpm'
            best_effort: true
          - platform: 'windows-latest'
            args: '--bundles msi,updater'
          - platform: 'macos-latest'
            args: '--target universal-apple-darwin'
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: BETA Builds - Install dependencies (windows) [yq]
        if: ${{ startsWith(runner.os,'Windows') }}
        run: |
          choco upgrade yq -y

      - name: BETA Builds - Install dependencies (linux) [yq]
        if: ${{ startsWith(runner.os,'Linux') }}
        shell: bash
        run: |
          sudo bash ./scripts/check-get-yq.sh

      - name: BETA Builds - Set environment variables
        if: ${{ ( github.event_name == 'schedule' ) || ( ! startsWith(github.ref, 'refs/heads/release') ) }}
        env:
          BETA_STRING: '(Beta)'
          OS_BETA_STRING: ${{ runner.os == 'Linux' && '-(Beta)' || ' (Beta)' }}
          AIRDROP_BASE_URL: ${{ secrets.BETA_AIRDROP_BASE_URL }}
          AIRDROP_API_BASE_URL: ${{ secrets.BETA_AIRDROP_API_BASE_URL }}
          TELEMETRY_API_URL: ${{ secrets.BETA_TELEMETRY_API_URL }}
          AIRDROP_WEBSOCKET_CRYPTO_KEY: ${{ secrets.DEV_AIRDROP_WEBSOCKET_CRYPTO_KEY }}
          # Used for linux formatting
          OS_BINARY_NAME: ${{ runner.os == 'Linux' && 'tari_universe' || 'Tari Universe' }}
          OS_BETA_DATE_SUFFIX: ${{ runner.os == 'Linux' && '-' || ' - ' }}
        shell: bash
        run: |
          #set -xueo pipefail
          echo "TARI_NETWORK=esme" >> $GITHUB_ENV
          echo "TARI_TARGET_NETWORK=testnet" >> $GITHUB_ENV
          echo "AIRDROP_BASE_URL=${{ env.AIRDROP_BASE_URL }}" >> $GITHUB_ENV
          echo "AIRDROP_API_BASE_URL=${{ env.AIRDROP_API_BASE_URL }}" >> $GITHUB_ENV
          echo "TELEMETRY_API_URL=${{ env.TELEMETRY_API_URL }}" >> $GITHUB_ENV
          echo "AIRDROP_WEBSOCKET_CRYPTO_KEY=${{ env.AIRDROP_WEBSOCKET_CRYPTO_KEY }}" >> $GITHUB_ENV
          echo "TS_FEATURES=release-ci-beta, airdrop-env, telemetry-env" >> $GITHUB_ENV
          # numeric-only and cannot be greater than 65535 for msi target
          export BETA_DATE=$(date +%m%d)
          cd "${GITHUB_WORKSPACE}/src-tauri"
          echo "releaseName=Tari Universe ${{ env.BETA_STRING }} v__VERSION__-${BETA_DATE}" >> $GITHUB_ENV
          # Don't mess with the double quotes and inner escaped quotes
          yq eval ".productName = \"${{ env.OS_BINARY_NAME }}${{ env.OS_BETA_STRING }}${{ env.OS_BETA_DATE_SUFFIX }}${BETA_DATE}\"" --output-format=json -i tauri.conf.json
          yq eval ".mainBinaryName = \"${{ env.OS_BINARY_NAME }}${{ env.OS_BETA_STRING }}${{ env.OS_BETA_DATE_SUFFIX }}${BETA_DATE}\"" --output-format=json -i tauri.conf.json
          yq eval ".app.windows[0].title = \"Tari Universe ${{ env.BETA_STRING }} - ${BETA_DATE} | Testnet\"" --output-format=json -i tauri.conf.json
          yq eval ".build.beforeBuildCommand = \"npm run build -- --mode development\"" --output-format=json -i tauri.conf.json
          yq eval ".identifier = \"com.tari.universe.beta\"" --output-format=json -i tauri.conf.json
          yq eval ".plugins.updater.endpoints = [\"https://raw.githubusercontent.com/tari-project/universe/main/.updater/beta-latest.json\"]" \
            --output-format=json -i tauri.conf.json
          cat tauri.conf.json
          sed -i.bak -e "s/\"icons\//\"beta-icons\//g" tauri.conf.json

      - name: RELEASE Builds - Set environment variables
        if: ${{ startsWith(github.ref, 'refs/heads/release') }}
        env:
          AIRDROP_WEBSOCKET_CRYPTO_KEY: ${{ secrets.PROD_AIRDROP_WEBSOCKET_CRYPTO_KEY }}
          # Used for linux formatting
          OS_BINARY_NAME: ${{ runner.os == 'Linux' && 'tari_universe' || 'Tari Universe' }}
        shell: bash
        run: |
          #set -xueo pipefail
          # Setup tauri action envs
          echo "tagName=v__VERSION__" >> $GITHUB_ENV
          echo "releaseName=Tari Universe v__VERSION__" >> $GITHUB_ENV
          #echo "releaseId=" >> $GITHUB_ENV
          echo "TARI_NETWORK=nextnet" >> $GITHUB_ENV
          echo "TARI_TARGET_NETWORK=nextnet" >> $GITHUB_ENV
          echo "AIRDROP_WEBSOCKET_CRYPTO_KEY=${{ env.AIRDROP_WEBSOCKET_CRYPTO_KEY }}" >> $GITHUB_ENV
          cd "${GITHUB_WORKSPACE}/src-tauri"
          TU_VERSION=$(jq -r .version tauri.conf.json)
          # Don't mess with the double quotes and inner escaped quotes
          yq eval ".productName = \"${{ env.OS_BINARY_NAME }}\"" --output-format=json -i tauri.conf.json
          yq eval ".mainBinaryName = \"${{ env.OS_BINARY_NAME }}\"" --output-format=json -i tauri.conf.json
          yq eval ".app.windows[0].title = \"Tari Universe v${TU_VERSION} | Testnet\"" --output-format=json -i tauri.conf.json
          yq eval ".identifier = \"com.tari.universe\"" --output-format=json -i tauri.conf.json
          yq eval ".plugins.updater.endpoints = [\"https://raw.githubusercontent.com/tari-project/universe/main/.updater/latest.json\", \"https://cdn-universe.tari.com/tari-project/universe/updater/latest.json\"]" \
            --output-format=json -i tauri.conf.json

      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm'

      - name: Rust Setup
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Cache Cargo files and outputs
        if: ${{ ( ! startsWith(github.ref, 'refs/heads/release') ) && ( ! startsWith(github.ref, 'refs/tags/v') ) }}
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install Dependencies - Linux
        if: startsWith(runner.os,'Linux')
        run: |
          sudo apt-get update
          sudo apt-get install --no-install-recommends --assume-yes \
            libwebkit2gtk-4.1-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf \
            libprotobuf-dev \
            protobuf-compiler

      - name: Install Dependencies - Linux/OpenCL
        if: startsWith(runner.os,'Linux')
        run: |
          sudo apt-get install --no-install-recommends --assume-yes \
            opencl-headers \
            ocl-icd-opencl-dev

      - name: Install Dependencies - macOS
        if: startsWith(runner.os,'macOS')
        run: |
          # openssl, cmake and autoconf already installed
          brew install zip coreutils automake protobuf libtool
          # force install rust OSX multi-arch components
          cd src-tauri
          rustup target add x86_64-apple-darwin
          rustup target add aarch64-apple-darwin
          rustup toolchain install stable-x86_64-apple-darwin --force-non-host
          rustup toolchain install stable-aarch64-apple-darwin --force-non-host

      - name: Install Dependencies - Windows
        if: startsWith(runner.os,'Windows')
        run: |
          vcpkg.exe install sqlite3:x64-windows zlib:x64-windows
          choco upgrade protoc -y

      - name: Install Dependencies - Windows/OpenCL
        if: startsWith(runner.os,'Windows')
        run: |
          vcpkg.exe --triplet=x64-windows install opencl

      - name: Set environment variables - Windows
        if: startsWith(runner.os,'Windows')
        shell: bash
        run: |
          echo "SQLITE3_LIB_DIR=C:\vcpkg\installed\x64-windows\lib" >> $GITHUB_ENV
          echo "LIB=C:\vcpkg\installed\x64-windows\lib" >> $GITHUB_ENV

      - name: Azure Code-signing Setup - Windows Only
        if: ${{ ( startsWith(runner.os,'Windows') ) && ( env.AZURE_TENANT_ID != '' ) }}
        shell: bash
        env:
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          WINDOWS_SIGN_COMMAND: trusted-signing-cli -e https://eus.codesigning.azure.net/ -a Tari -d 'TariUniverse' -c Tarilabs %1
        run: |
          cd "${GITHUB_WORKSPACE}/src-tauri"
          echo '{}' > ./tauri.windows.conf.json
          yq eval ".bundle.windows.signCommand = env(WINDOWS_SIGN_COMMAND)" --output-format=json -i ./tauri.windows.conf.json
          cat ./tauri.windows.conf.json
          cargo install trusted-signing-cli@0.5.0 --locked

      - name: Install Dependencies - Node
        run: |
          npm --version
          npm install

      - name: Build Tauri Apps
        id: build
        uses: tauri-apps/tauri-action@dev
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ENABLE_CODE_SIGNING: ${{ secrets.APPLE_CERTIFICATE || secrets.AZURE_TENANT_ID }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          AZURE_TENANT_ID: ${{ startsWith(runner.os,'Windows') && secrets.AZURE_TENANT_ID }}
          AZURE_CLIENT_ID: ${{ startsWith(runner.os,'Windows') && secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ startsWith(runner.os,'Windows') && secrets.AZURE_CLIENT_SECRET }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          NODE_OPTIONS: '--max_old_space_size=4096'
        with:
          tagName: ${{ env.tagName }}
          releaseName: ${{ env.releaseName }}
          releaseBody: 'Tari Universe - See the assets to download this version and install'
          releaseDraft: true
          prerelease: true
          includeDebug: false
          includeRelease: true
          args: ${{ matrix.args }} --features "${{ env.TS_FEATURES }}"

      - name: Locate artifacts path
        continue-on-error: true
        env:
          artifactPaths: ${{ steps.build.outputs.artifactPaths }}
        shell: bash
        run: |
          echo -e "Artifact paths: \n${{ join(fromJSON( env.artifactPaths ), '\n') }}"
          MSI_FILE=$( echo '${{ env.artifactPaths }}' | jq -r '[.[] | select(endswith(".msi"))] | join(" ")' )
          echo "MSI_FILE=$MSI_FILE" >> $GITHUB_ENV

      - name: BETA Builds - Upload assets
        if: ${{ ( github.event_name == 'schedule' ) || ( ! startsWith(github.ref, 'refs/heads/release') ) }}
        uses: actions/upload-artifact@v4
        with:
          name: tari-universe-beta_${{ steps.build.outputs.appVersion }}_${{ matrix.platform }}${{ matrix.extra }}
          path: "${{ join(fromJSON(steps.build.outputs.artifactPaths), '\n') }}"

      - name: Windows debug symbols - Upload asset
        if: startsWith(runner.os,'Windows')
        uses: actions/upload-artifact@v4
        with:
          name: tari_universe.pdb
          path: "${{ github.workspace }}/src-tauri/target/release/tari_universe.pdb"

      - name: Windows install Sentry CLI
        if: ${{ ( startsWith(runner.os,'Windows') ) && ( env.SENTRY_AUTH_TOKEN != '' ) }}
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_SYMBOLS_AUTH_TOKEN }}
        shell: bash
        run: npm install @sentry/cli@2.42.2 -g

      - name: Windows debug symbols - Upload to Sentry
        if: ${{ ( startsWith(runner.os,'Windows') ) && ( env.SENTRY_AUTH_TOKEN != '' ) }}
        continue-on-error: true
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_SYMBOLS_AUTH_TOKEN }}
        shell: bash
        run: |
          sentry-cli debug-files check ./src-tauri/target/release/tari_universe.pdb
          sentry-cli debug-files upload --org tari-labs --project tari-universe ./src-tauri/target/release/tari_universe.pdb

      - name: Verify Windows signing for installer
        if: ${{ ( startsWith(runner.os,'Windows') ) && ( env.AZURE_TENANT_ID != '' ) }}
        continue-on-error: true
        env:
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          TEST_ENV: "Tari Universe (Beta) - 0312_0.9.817_x64_en-US.msi"
        shell: powershell
        run: |
          # Get the Program Files (x86) directory dynamically
          $programFilesX86 = [System.Environment]::GetFolderPath("ProgramFilesX86")
          $sdkBasePath = Join-Path $programFilesX86 "Windows Kits"

          # Check if Windows Kits exists
          if (-Not (Test-Path $sdkBasePath)) {
            Write-Error "Windows Kits folder not found at $sdkBasePath!"
            exit 1
          }

          Write-Output "Searching for signtool.exe in: $sdkBasePath"

          # Search for signtool.exe within Windows Kits fold with x64 in the path
          $signtoolPath = Get-ChildItem -Path $sdkBasePath -Recurse -Filter signtool.exe -ErrorAction SilentlyContinue |
                          Where-Object { $_.FullName -match '\\x64\\' } |
                          Select-Object -ExpandProperty FullName -First 1

          if (-not $signtoolPath) {
            Write-Error "signtool.exe not found in Windows Kits folder!"
            exit 1
          }

          Write-Output "Found signtool.exe at: $signtoolPath"

          $Signature = Get-AuthenticodeSignature "${{ env.MSI_FILE }}"

          # Display results
          Write-Host "File: ${{ env.MSI_FILE }}"
          Write-Host "  - Status: $($Signature.Status)"
          Write-Host "  - Status Message: $($Signature.StatusMessage)"
          Write-Host "  - Signer: $($Signature.SignerCertificate.Subject)"
          Write-Host "  - Issuer: $($Signature.SignerCertificate.Issuer)"
          Write-Host "---------------------------------------------"

          & $signtoolPath verify /pa "${{ env.MSI_FILE }}"
          if ($LASTEXITCODE -ne 0) {
            Write-Error "!! Signature verification failed for ${{ env.MSI_FILE }} !!"
            exit 1
          }
