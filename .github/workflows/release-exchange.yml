---
name: Release-Exchange

'on':
  workflow_dispatch:
    inputs:
      destination:
        description: 'Artifacts destination'
        required: true
        type: choice
        options:
          - 'github'
          - 'aws'
      network:
        description: 'Network to build for'
        required: true
        type: choice
        options:
          - 'mainnet'
          - 'nextnet'
          - 'esmeralda'

concurrency:
  # https://docs.github.com/en/actions/examples/using-concurrency-expressions-and-a-test-matrix
  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
  cancel-in-progress: ${{ !startsWith(github.ref, 'refs/tags/v') || github.ref != 'refs/heads/main' || github.ref != 'refs/heads/release' }}
permissions: {}

env:
  TS_FEATURES: release-ci

jobs:
  read-exchanges:
    name: Read exchanges
    outputs:
      EXCHANGES_IDS: ${{ steps.read-exchanges.outputs.EXCHANGES_IDS }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Read exchanges
        id: read-exchanges
        run: |
          EXCHANGES_IDS=$(jq -c '.exchanges' exchanges.json)
          echo "EXCHANGES_IDS=$EXCHANGES_IDS" >> $GITHUB_OUTPUT
  builds:
    needs: read-exchanges
    name: Building ${{ matrix.exchange.id }} | ${{ matrix.platforms.platform }}${{ matrix.platforms.extra }}
    # best effort disabled by default
    continue-on-error: ${{ matrix.platforms.best_effort || false }}
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        exchange: ${{ fromJson(needs.read-exchanges.outputs.EXCHANGES_IDS) }}
        platforms:
          - platform: 'ubuntu-22.04'
            args: '--bundles deb,appimage'
            extra: '-x64'
          - platform: 'ubuntu-24.04-arm'
            args: '--bundles deb,appimage'
            best_effort: true
          - platform: 'ubuntu-22.04'
            args: '--bundles rpm'
            extra: '-x64-rpm'
            best_effort: true
          - platform: 'ubuntu-24.04-arm'
            args: '--bundles rpm'
            extra: '-rpm'
            best_effort: true
          - platform: 'windows-latest'
            args: '--bundles msi'
          - platform: 'macos-latest'
            args: '--target universal-apple-darwin'
    runs-on: ${{ matrix.platforms.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Builds - Install dependencies (windows) [yq]
        if: ${{ startsWith(runner.os,'Windows') }}
        run: |
          choco upgrade yq -y

      - name: Builds - Install dependencies (linux) [yq]
        if: ${{ startsWith(runner.os,'Linux') }}
        shell: bash
        run: |
          sudo bash ./scripts/check-get-yq.sh

      - name: Set environment variables
        env:
          AIRDROP_WEBSOCKET_CRYPTO_KEY: ${{ secrets.PROD_AIRDROP_WEBSOCKET_CRYPTO_KEY }}
          # Used for linux formatting
          OS_BINARY_NAME: ${{ runner.os == 'Linux' && 'tari_universe' || 'Tari Universe' }}
        shell: bash
        run: |
          #set -xueo pipefail
          echo "TARI_NETWORK=${{ inputs.network }}" >> $GITHUB_ENV
          echo "TARI_TARGET_NETWORK=mainnet" >> $GITHUB_ENV
          echo "AIRDROP_WEBSOCKET_CRYPTO_KEY=${{ env.AIRDROP_WEBSOCKET_CRYPTO_KEY }}" >> $GITHUB_ENV
          cd "${GITHUB_WORKSPACE}/src-tauri"
          TU_VERSION=$(jq -r .version tauri.conf.json)
          # Don't mess with the double quotes and inner escaped quotes
          yq eval ".productName = \"${{ env.OS_BINARY_NAME }}\"" --output-format=json -i tauri.conf.json
          yq eval ".mainBinaryName = \"${{ env.OS_BINARY_NAME }}\"" --output-format=json -i tauri.conf.json
          yq eval ".app.windows[0].title = \"Tari Universe v${TU_VERSION} - ${{ secrets[matrix.exchange.secret_name]}}\"" --output-format=json -i tauri.conf.json
          yq eval ".identifier = \"com.tari.universe.${{ secrets[matrix.exchange.secret_name] }}\"" --output-format=json -i tauri.conf.json
          yq eval ".plugins.updater.endpoints = [\"https://raw.githubusercontent.com/tari-project/universe/main/.updater/latest.json\", \"https://cdn-universe.tari.com/tari-project/universe/updater/latest.json\"]" \
            --output-format=json -i tauri.conf.json

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm'

      - name: Rust Setup
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platforms.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Cache Cargo files and outputs
        if: ${{ ( ! startsWith(github.ref, 'refs/heads/release') ) && ( ! startsWith(github.ref, 'refs/tags/v') ) }}
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install Dependencies - Linux
        if: startsWith(runner.os,'Linux')
        run: |
          sudo apt-get update
          sudo apt-get install --no-install-recommends --assume-yes \
            libwebkit2gtk-4.1-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf \
            libprotobuf-dev \
            protobuf-compiler

      - name: Install Dependencies - Linux/AppImage
        if: ${{ ( startsWith(runner.os,'Linux') ) && ( contains(matrix.platforms.args, 'appimage') ) }}
        run: |
          sudo apt-get install --no-install-recommends --assume-yes \
            appstream

      - name: Install Dependencies - Linux/OpenCL
        if: startsWith(runner.os,'Linux')
        run: |
          sudo apt-get install --no-install-recommends --assume-yes \
            opencl-headers \
            ocl-icd-opencl-dev

        # We set "bundleMediaFramework" to true, it should bundle into appimage all needed libraries for playing videos
        # It requires us to set ARCH environment variable
      - name: BundleMediaFramework fix - [ Linux Appimage ]
        if: ${{ ( startsWith(runner.os,'Linux') ) && ( contains(matrix.platforms.args, 'appimage') ) }}
        run: echo "ARCH=$(uname -m)" >> $GITHUB_ENV

      - name: Install Dependencies - macOS
        if: startsWith(runner.os,'macOS')
        run: |
          # openssl, cmake and autoconf already installed
          brew install zip coreutils automake protobuf libtool
          # force install rust OSX multi-arch components
          cd src-tauri
          rustup target add x86_64-apple-darwin
          rustup target add aarch64-apple-darwin
          rustup toolchain install stable-x86_64-apple-darwin --force-non-host
          rustup toolchain install stable-aarch64-apple-darwin --force-non-host

      - name: Install Dependencies - Windows
        if: startsWith(runner.os,'Windows')
        run: |
          vcpkg.exe install sqlite3:x64-windows zlib:x64-windows
          choco upgrade protoc -y

      - name: Install Dependencies - Windows/OpenCL
        if: startsWith(runner.os,'Windows')
        run: |
          vcpkg.exe --triplet=x64-windows install opencl

      - name: Set environment variables - Windows
        if: startsWith(runner.os,'Windows')
        shell: bash
        run: |
          echo "SQLITE3_LIB_DIR=C:\vcpkg\installed\x64-windows\lib" >> $GITHUB_ENV
          echo "LIB=C:\vcpkg\installed\x64-windows\lib" >> $GITHUB_ENV

      - name: Azure Code-signing Setup - Windows Only
        if: ${{ ( startsWith(runner.os,'Windows') ) && ( env.AZURE_TENANT_ID != '' ) }}
        shell: bash
        env:
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          WINDOWS_SIGN_COMMAND: trusted-signing-cli -e https://eus.codesigning.azure.net/ -a Tari -d 'TariUniverse' -c Tarilabs %1
        run: |
          cd "${GITHUB_WORKSPACE}/src-tauri"
          echo '{}' > ./tauri.windows.conf.json
          yq eval ".bundle.windows.signCommand = env(WINDOWS_SIGN_COMMAND)" --output-format=json -i ./tauri.windows.conf.json
          cat ./tauri.windows.conf.json
          cargo install trusted-signing-cli@0.5.0 --locked

      - name: Install Dependencies - Node
        run: |
          npm --version
          npm install

      - name: Build Tauri Apps
        id: build
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ENABLE_CODE_SIGNING: ${{ secrets.APPLE_CERTIFICATE || secrets.AZURE_TENANT_ID }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          AZURE_TENANT_ID: ${{ startsWith(runner.os,'Windows') && secrets.AZURE_TENANT_ID }}
          AZURE_CLIENT_ID: ${{ startsWith(runner.os,'Windows') && secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ startsWith(runner.os,'Windows') && secrets.AZURE_CLIENT_SECRET }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          NODE_OPTIONS: '--max_old_space_size=4096'
          EXCHANGE_ID: ${{ matrix.exchange.id }}
        with:
          releaseBody: 'Tari Universe - See the assets to download this version and install'
          releaseDraft: false
          prerelease: true
          includeDebug: false
          includeRelease: true
          args: ${{ matrix.platforms.args }} --features "${{ env.TS_FEATURES }}"

      - name: Add msbuild to PATH (windows)
        uses: microsoft/setup-msbuild@v2
        if: startsWith(runner.os,'Windows')

      - name: Build bundled WiX Windows installer
        if: ${{ startsWith(runner.os,'Windows') }}
        env:
          TARI_UNIVERSE_APP_VERSION: ${{ steps.build.outputs.appVersion }}
          WIX_LOGLEVEL: Verbose
        shell: bash
        run: |
          mkdir -p "tari-win-bundler/executables"
          cd "tari-win-bundler/executables"
          # https://learn.microsoft.com/en-us/cpp/windows/latest-supported-vc-redist?view=msvc-170
          curl -s --location --remote-name "https://aka.ms/vs/17/release/vc_redist.x64.exe"
          cd ../..
          ls -la "src-tauri/target/release/bundle/msi"
          ls -la "tari-win-bundler/executables"
          export TARI_UNIVERSE_BUNDLER_NAME="Tari Universe_${{ env.TARI_UNIVERSE_APP_VERSION }}_x64_en-US"
          export TARI_UNIVERSE_EXECUTABLE_AND_FOLDER_NAME="Tari Universe"
          export TARI_UNIVERSE_UPGRADE_CODE=ed60939d-f2b8-5b6e-a7af-bd0d5cf13e37
          export TARI_UNIVERSE_INSTALLER_NAME="${TARI_UNIVERSE_BUNDLER_NAME}.msi"
          echo "TARI_UNIVERSE_INSTALLER_NAME is ${TARI_UNIVERSE_INSTALLER_NAME}"
          echo "TARI_UNIVERSE_INSTALLER_NAME=${TARI_UNIVERSE_INSTALLER_NAME}" >> $GITHUB_ENV
          echo "TARI_UNIVERSE_BUNDLER_NAME is ${TARI_UNIVERSE_BUNDLER_NAME}"
          echo "TARI_UNIVERSE_BUNDLER_NAME=${TARI_UNIVERSE_BUNDLER_NAME}" >> $GITHUB_ENV
          echo "TARI_UNIVERSE_EXECUTABLE_AND_FOLDER_NAME is ${TARI_UNIVERSE_EXECUTABLE_AND_FOLDER_NAME}"
          echo "TARI_UNIVERSE_EXECUTABLE_AND_FOLDER_NAME=${TARI_UNIVERSE_EXECUTABLE_AND_FOLDER_NAME}" >> $GITHUB_ENV
          echo "TARI_UNIVERSE_UPGRADE_CODE is ${TARI_UNIVERSE_UPGRADE_CODE}"

          dotnet tool install --global wix --version 5.0.2
          wix extension add WixToolset.Util.wixext/5.0.2
          wix extension add WixToolset.BootstrapperApplications.wixext/5.0.2
          wix extension list
          wix build tari-win-bundler/Bundle.wxs \
            -ext WixToolset.Util.wixext \
            -ext WixToolset.BootstrapperApplications.wixext \
            -includepath tari-win-bundler \
            -includepath tari-win-bundler/resources \
            -includepath tari-win-bundler/executables \
            -includepath wix \
            -includepath src-tauri/target/release/bundle/msi
          ls -la src-tauri/target/release/bundle/msi
          ls -la tari-win-bundler
          ls -la tari-win-bundler/executables
          mv -v ./tari-win-bundler/Bundle.exe "./tari-win-bundler/${TARI_UNIVERSE_BUNDLER_NAME}_unsigned.exe"

      - name: Sign Bundled Windows Installer
        if: ${{ ( startsWith(runner.os,'Windows') ) && ( env.AZURE_TENANT_ID != '' ) }}
        shell: bash
        env:
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        run: |
          wix burn detach "./tari-win-bundler/${TARI_UNIVERSE_BUNDLER_NAME}_unsigned.exe" -engine ./tari-win-bundler/burnengine.exe
          trusted-signing-cli -e https://eus.codesigning.azure.net/ -a Tari -d TariUniverse -c Tarilabs ./tari-win-bundler/burnengine.exe
          wix burn reattach "./tari-win-bundler/${TARI_UNIVERSE_BUNDLER_NAME}_unsigned.exe" -engine ./tari-win-bundler/burnengine.exe -o "./tari-win-bundler/${TARI_UNIVERSE_BUNDLER_NAME}.exe"
          trusted-signing-cli -e https://eus.codesigning.azure.net/ -a Tari -d TariUniverse -c Tarilabs "./tari-win-bundler/${TARI_UNIVERSE_BUNDLER_NAME}.exe"

      - name: Verify signing for Bundled Windows installer
        if: ${{ ( startsWith(runner.os,'Windows') ) && ( env.AZURE_TENANT_ID != '' ) }}
        continue-on-error: true
        env:
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        shell: powershell
        run: |
          # Get the Program Files (x86) directory dynamically
          $programFilesX86 = [System.Environment]::GetFolderPath("ProgramFilesX86")
          $sdkBasePath = Join-Path $programFilesX86 "Windows Kits"

          # Check if Windows Kits exists
          if (-Not (Test-Path $sdkBasePath)) {
            Write-Error "Windows Kits folder not found at $sdkBasePath!"
            exit 1
          }

          Write-Output "Searching for signtool.exe in: $sdkBasePath"

          # Search for signtool.exe within Windows Kits fold with x64 in the path
          $signtoolPath = Get-ChildItem -Path $sdkBasePath -Recurse -Filter signtool.exe -ErrorAction SilentlyContinue |
                          Where-Object { $_.FullName -match '\\x64\\' } |
                          Select-Object -ExpandProperty FullName -First 1

          if (-not $signtoolPath) {
            Write-Error "signtool.exe not found in Windows Kits folder!"
            exit 1
          }

          Write-Output "Found signtool.exe at: $signtoolPath"

          cd tari-win-bundler

          $Signature = Get-AuthenticodeSignature "${{ env.TARI_UNIVERSE_BUNDLER_NAME }}.exe"

          # Display results
          Write-Host "File: ${{ env.TARI_UNIVERSE_BUNDLER_NAME }}.exe"
          Write-Host "  - Status: $($Signature.Status)"
          Write-Host "  - Status Message: $($Signature.StatusMessage)"
          Write-Host "  - Signer: $($Signature.SignerCertificate.Subject)"
          Write-Host "  - Issuer: $($Signature.SignerCertificate.Issuer)"
          Write-Host "---------------------------------------------"

          & $signtoolPath verify /pa "${{ env.TARI_UNIVERSE_BUNDLER_NAME }}.exe"
          if ($LASTEXITCODE -ne 0) {
            Write-Error "!! Signature verification failed for ${{ env.TARI_UNIVERSE_BUNDLER_NAME }}.exe !!"
            exit 1
          }

      - name: Locate artifacts path
        continue-on-error: true
        env:
          artifactPaths: ${{ steps.build.outputs.artifactPaths }}
        shell: bash
        run: |
          echo -e "Artifact paths: \n${{ join(fromJSON( env.artifactPaths ), '\n') }}"
          MSI_FILE=$( echo '${{ env.artifactPaths }}' | jq -r '[.[] | select(endswith(".msi"))] | join(" ")' )
          echo "MSI_FILE=$MSI_FILE" >> $GITHUB_ENV

      - name: Builds - Upload assets [ GitHub ]
        if: ${{( startsWith(inputs.destination, 'github' )) }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{matrix.exchange.id}}_${{ steps.build.outputs.appVersion }}_${{ matrix.platforms.platform }}${{ matrix.platforms.extra }}
          path: "${{ join(fromJSON(steps.build.outputs.artifactPaths), '\n') }}"

      - name: Bundled Windows installer upload [ GitHub ]
        if: ${{ startsWith(runner.os,'Windows') && ( startsWith(inputs.destination, 'github' ) ) }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{matrix.exchange.id}}_${{ steps.build.outputs.appVersion }}_x64_en-US
          path: ./tari-win-bundler/${{ env.TARI_UNIVERSE_BUNDLER_NAME }}*.exe

      - name: Builds - Upload assets [ AWS ]
        if: ${{( startsWith(inputs.destination, 'aws' )) && ( env.AWS_SECRET_ACCESS_KEY != '' ) && runner.name != 'self-hosted' }}
        env:
          BASE_URL: ${{ secrets.BASE_URL }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_ENDPOINT_URL: ${{ secrets.AWS_ENDPOINT_URL }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          EXCHANGE_NAME: ${{ secrets[matrix.exchange.secret_name] }}
          S3CMD: 'cp'
          S3OPTIONS: '--content-type "application/octet-stream"'
        run: |
          docker run --rm -t \
            -v ${PWD}:/work/data \
            -w /work/data \
            -e AWS_ACCESS_KEY_ID="${{ env.AWS_ACCESS_KEY_ID }}" \
            -e AWS_SECRET_ACCESS_KEY="${{ env.AWS_SECRET_ACCESS_KEY }}" \
            -e AWS_ENDPOINT_URL="${{ env.AWS_ENDPOINT_URL }}" \
            -e AWS_DEFAULT_REGION="WEUR" \
            amazon/aws-cli:2.22.35 \
              s3 ${{ env.S3CMD }} ${{ env.S3OPTIONS }} \
                ${{ join(fromJSON(steps.build.outputs.artifactPaths), '\n') }} \
                s3://${{ env.BASE_URL }}/exchanges/${{ steps.build.outputs.appVersion }}/${{ env.EXCHANGE_NAME }}/

      - name: Bundled Windows installer upload [ AWS ]
        if: ${{ ( startsWith(runner.os,'Windows') ) && ( startsWith(inputs.destination, 'aws' ) ) && ( env.AWS_SECRET_ACCESS_KEY != '' ) && runner.name != 'self-hosted' }}
        env:
          BASE_URL: ${{ secrets.BASE_URL }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_ENDPOINT_URL: ${{ secrets.AWS_ENDPOINT_URL }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          EXCHANGE_NAME: ${{ secrets[matrix.exchange.secret_name] }}
          S3CMD: 'cp'
          S3OPTIONS: '--content-type "application/octet-stream"'
        run: |
          docker run --rm -t \
            -v ${PWD}:/work/data \
            -w /work/data \
            -e AWS_ACCESS_KEY_ID="${{ env.AWS_ACCESS_KEY_ID }}" \
            -e AWS_SECRET_ACCESS_KEY="${{ env.AWS_SECRET_ACCESS_KEY }}" \
            -e AWS_ENDPOINT_URL="${{ env.AWS_ENDPOINT_URL }}" \
            -e AWS_DEFAULT_REGION="WEUR" \
            amazon/aws-cli:2.22.35 \
              s3 ${{ env.S3CMD }} ${{ env.S3OPTIONS }} \
                ./tari-win-bundler/${{ env.TARI_UNIVERSE_BUNDLER_NAME }}*.exe \
                s3://${{ env.BASE_URL }}/exchanges/${{ steps.build.outputs.appVersion }}/${{ env.EXCHANGE_NAME }}/

      - name: Windows debug symbols - Upload asset
        if: startsWith(runner.os,'Windows')
        uses: actions/upload-artifact@v4
        with:
          name: tari_universe.pdb
          path: '${{ github.workspace }}/src-tauri/target/release/tari_universe.pdb'

      - name: Windows install Sentry CLI
        if: ${{ ( startsWith(runner.os,'Windows') ) && ( env.SENTRY_AUTH_TOKEN != '' ) }}
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_SYMBOLS_AUTH_TOKEN }}
        shell: bash
        run: npm install @sentry/cli@2.42.2 -g

      - name: Windows debug symbols - Upload to Sentry
        if: ${{ ( startsWith(runner.os,'Windows') ) && ( env.SENTRY_AUTH_TOKEN != '' ) }}
        continue-on-error: true
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_SYMBOLS_AUTH_TOKEN }}
        shell: bash
        run: |
          sentry-cli debug-files check ./src-tauri/target/release/tari_universe.pdb
          sentry-cli debug-files upload --org tari-labs --project tari-universe ./src-tauri/target/release/tari_universe.pdb
